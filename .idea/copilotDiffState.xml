<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/sebook/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/sebook/MainActivity.kt" />
              <option name="originalContent" value="package com.example.sebook&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.currentBackStackEntryAsState&#10;import androidx.navigation.compose.rememberNavController&#10;import com.example.sebook.ui.theme.SebookTheme&#10;import com.example.sebook.ui.theme.components.BottomNavBar&#10;import com.example.sebook.ui.theme.screens.*&#10;import com.example.sebook.ui.theme.screens.booking.BookingFormScreen&#10;import com.example.sebook.ui.theme.screens.booking.BookingScreen&#10;import com.example.sebook.ui.theme.screens.forum.ForumScreen&#10;import com.example.sebook.ui.theme.screens.informasi.DetailRuangan&#10;import com.example.sebook.ui.theme.screens.informasi.RuanganDiSakato&#10;import com.example.sebook.ui.theme.screens.notification.NotificationScreen&#10;import com.example.sebook.ui.theme.screens.riwayat.RiwayatPengajuan&#10;import com.example.sebook.ui.theme.screens.panduan.PanduanScreen&#10;import com.example.sebook.ui.theme.screens.ChangePasswordScreen&#10;import com.example.sebook.ui.theme.screens.riwayat.ReviewScreen&#10;&#10;// MainActivity: Entry point for the Booking Room App&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        // Set up the Compose UI with the app theme and root navigation&#10;        setContent {&#10;            SebookTheme {&#10;                val navController = rememberNavController()&#10;                val navBackStackEntry by navController.currentBackStackEntryAsState()&#10;                val currentRoute = navBackStackEntry?.destination?.route&#10;&#10;                // Tampilkan BottomNavBar hanya pada route tab utama&#10;                val showBottomBar = when (currentRoute) {&#10;                    &quot;home&quot;, &quot;history&quot;, &quot;information&quot;, &quot;forum&quot; -&gt; true&#10;                    else -&gt; false&#10;                }&#10;&#10;                Scaffold(&#10;                    bottomBar = {&#10;                        if (showBottomBar) BottomNavBar(navController = navController)&#10;                    }&#10;                ) { innerPadding -&gt;&#10;                    NavHost(&#10;                        navController = navController,&#10;                        startDestination = &quot;welcome&quot;,&#10;                        modifier = Modifier.fillMaxSize()&#10;                    ) {&#10;                        composable(&quot;welcome&quot;) {&#10;                            WelcomeScreen(&#10;                                onLoginClick = { navController.navigate(&quot;login&quot;) },&#10;                                onRegisterClick = { navController.navigate(&quot;regist&quot;) }&#10;                            )&#10;                        }&#10;                        composable(&quot;regist&quot;) { Regist(onRegisterClick = { navController.navigate(&quot;login&quot;) { launchSingleTop = true } }) }&#10;                        composable(&quot;login&quot;) {&#10;                            Login(onLoginClick = {&#10;                                navController.navigate(&quot;home&quot;) {&#10;                                    popUpTo(&quot;welcome&quot;) { inclusive = true }&#10;                                    launchSingleTop = true&#10;                                }&#10;                            })&#10;                        }&#10;                        composable(&quot;home&quot;) { Box(Modifier.fillMaxSize()) { HomeContent(innerPadding, navController) } }&#10;                        composable(&quot;history&quot;) { Box(Modifier.fillMaxSize()) { RiwayatPengajuan(navController) } }&#10;                        composable(&quot;information&quot;) { Box(Modifier.fillMaxSize()) { RuanganDiSakato(innerPadding, navController) } }&#10;                        composable(&quot;forum&quot;) { Box(Modifier.fillMaxSize(), contentAlignment = Alignment.Center) { ForumScreen(navController) } }&#10;&#10;                        // Additional direct screens&#10;                        composable(&quot;notifications&quot;) { NotificationScreen(navController) }&#10;                        composable(&quot;profile&quot;) { ProfileScreen(navController) }&#10;                        composable(&quot;change_password&quot;) { ChangePasswordScreen(navController) }&#10;                        composable(&quot;booking&quot;) { BookingScreen(navController) }&#10;                        composable(&quot;jadwal/{selectable}&quot;) { backStackEntry -&gt;&#10;                            val selectable = backStackEntry.arguments?.getString(&quot;selectable&quot;) == &quot;1&quot;&#10;                            BookingScreen(navController = navController, selectable = selectable)&#10;                        }&#10;                        composable(&quot;panduan&quot;) { PanduanScreen(innerPadding, navController) }&#10;                        composable(&quot;detail_ruangan/{roomKey}&quot;) { backStackEntry -&gt;&#10;                            val key = backStackEntry.arguments?.getString(&quot;roomKey&quot;).orEmpty()&#10;                            val roomName: String&#10;                            val images: List&lt;Int&gt;&#10;                            val description: String&#10;                            val capacity: Int&#10;                            val facilities: List&lt;String&gt;&#10;&#10;                            when (key) {&#10;                                &quot;ampliteather&quot; -&gt; {&#10;                                    roomName = &quot;Ruang Ampliteather&quot;&#10;                                    images = listOf(&#10;                                        R.drawable.amplifier_1,&#10;                                        R.drawable.amplifier_2,&#10;                                        R.drawable.amplifier_3&#10;                                    )&#10;                                    description = &quot;Ruang Ampliteather cocok untuk presentasi terbuka dan kegiatan komunitas dengan tata ruang tribun.&quot;&#10;                                    capacity = 60&#10;                                    facilities = listOf(&quot;Tribun bertingkat&quot;, &quot;Sound system&quot;, &quot;Panggung kecil&quot;)&#10;                                }&#10;                                &quot;tengah&quot; -&gt; {&#10;                                    roomName = &quot;Ruang Tengah&quot;&#10;                                    images = listOf(&#10;                                        R.drawable.tengah_1,&#10;                                        R.drawable.tengah_2,&#10;                                        R.drawable.tengah_3&#10;                                    )&#10;                                    description = &quot;Ruang serbaguna yang ideal untuk rapat, workshop, dan presentasi.&quot;&#10;                                    capacity = 30&#10;                                    facilities = listOf(&quot;Proyektor + layar&quot;, &quot;Kursi &amp; meja&quot;, &quot;Stop kontak&quot;)&#10;                                }&#10;                                &quot;outdor&quot; -&gt; {&#10;                                    roomName = &quot;Ruang Outdor&quot;&#10;                                    images = listOf(&#10;                                        R.drawable.belakang_1,&#10;                                        R.drawable.belakang_2,&#10;                                        R.drawable.belakang_3&#10;                                    )&#10;                                    description = &quot;Area luar ruangan cocok untuk diskusi santai atau acara komunitas.&quot;&#10;                                    capacity = 40&#10;                                    facilities = listOf(&quot;Area terbuka&quot;, &quot;Pencahayaan outdoor&quot;, &quot;Akses listrik terbatas&quot;)&#10;                                }&#10;                                else -&gt; {&#10;                                    roomName = &quot;Ruang Ampliteather&quot;&#10;                                    images = listOf(&#10;                                        R.drawable.amplifier_1,&#10;                                        R.drawable.amplifier_2,&#10;                                        R.drawable.amplifier_3&#10;                                    )&#10;                                    description = &quot;Ruang Ampliteather cocok untuk presentasi terbuka dan kegiatan komunitas dengan tata ruang tribun.&quot;&#10;                                    capacity = 60&#10;                                    facilities = listOf(&quot;Tribun bertingkat&quot;, &quot;Sound system&quot;, &quot;Panggung kecil&quot;)&#10;                                }&#10;                            }&#10;&#10;                            DetailRuangan(&#10;                                navController = navController,&#10;                                innerPadding = innerPadding,&#10;                                roomName = roomName,&#10;                                imageResources = images,&#10;                                description = description,&#10;                                capacity = capacity,&#10;                                facilities = facilities&#10;                            )&#10;                        }&#10;                        composable(&quot;form&quot;) { BookingFormScreen() }&#10;                        composable(&quot;review&quot;) { ReviewScreen(navController) }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.sebook&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.currentBackStackEntryAsState&#10;import androidx.navigation.compose.rememberNavController&#10;import com.example.sebook.ui.theme.SebookTheme&#10;import com.example.sebook.ui.theme.components.BottomNavBar&#10;import com.example.sebook.ui.theme.screens.*&#10;import com.example.sebook.ui.theme.screens.booking.BookingFormScreen&#10;import com.example.sebook.ui.theme.screens.booking.BookingScreen&#10;import com.example.sebook.ui.theme.screens.forum.ForumScreen&#10;import com.example.sebook.ui.theme.screens.informasi.DetailRuangan&#10;import com.example.sebook.ui.theme.screens.informasi.RuanganDiSakato&#10;import com.example.sebook.ui.theme.screens.notification.NotificationScreen&#10;import com.example.sebook.ui.theme.screens.riwayat.RiwayatPengajuan&#10;import com.example.sebook.ui.theme.screens.panduan.PanduanScreen&#10;import com.example.sebook.ui.theme.screens.ChangePasswordScreen&#10;import com.example.sebook.ui.theme.screens.riwayat.ReviewScreen&#10;&#10;// MainActivity: Entry point for the Booking Room App&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        // Set up the Compose UI with the app theme and root navigation&#10;        setContent {&#10;            SebookTheme {&#10;                val navController = rememberNavController()&#10;                val navBackStackEntry by navController.currentBackStackEntryAsState()&#10;                val currentRoute = navBackStackEntry?.destination?.route&#10;&#10;                // Tampilkan BottomNavBar hanya pada route tab utama&#10;                val showBottomBar = when (currentRoute) {&#10;                    &quot;home&quot;, &quot;history&quot;, &quot;information&quot;, &quot;forum&quot; -&gt; true&#10;                    else -&gt; false&#10;                }&#10;&#10;                Scaffold(&#10;                    bottomBar = {&#10;                        if (showBottomBar) BottomNavBar(navController = navController)&#10;                    }&#10;                ) { innerPadding -&gt;&#10;                    NavHost(&#10;                        navController = navController,&#10;                        startDestination = &quot;welcome&quot;,&#10;                        modifier = Modifier.fillMaxSize()&#10;                    ) {&#10;                        composable(&quot;welcome&quot;) {&#10;                            WelcomeScreen(&#10;                                onLoginClick = { navController.navigate(&quot;login&quot;) },&#10;                                onRegisterClick = { navController.navigate(&quot;regist&quot;) }&#10;                            )&#10;                        }&#10;                        composable(&quot;regist&quot;) { Regist(onRegisterClick = { navController.navigate(&quot;login&quot;) { launchSingleTop = true } }) }&#10;                        composable(&quot;login&quot;) {&#10;                            Login(onLoginClick = {&#10;                                navController.navigate(&quot;home&quot;) {&#10;                                    popUpTo(&quot;welcome&quot;) { inclusive = true }&#10;                                    launchSingleTop = true&#10;                                }&#10;                            })&#10;                        }&#10;                        composable(&quot;home&quot;) { Box(Modifier.fillMaxSize()) { HomeContent(innerPadding, navController) } }&#10;                        composable(&quot;history&quot;) { Box(Modifier.fillMaxSize()) { RiwayatPengajuan(navController) } }&#10;                        composable(&quot;information&quot;) { Box(Modifier.fillMaxSize()) { RuanganDiSakato(innerPadding, navController) } }&#10;                        composable(&quot;forum&quot;) { Box(Modifier.fillMaxSize(), contentAlignment = Alignment.Center) { ForumScreen(navController) } }&#10;&#10;                        // Additional direct screens&#10;                        composable(&quot;notifications&quot;) { NotificationScreen(navController) }&#10;                        composable(&quot;profile&quot;) { ProfileScreen(navController) }&#10;                        composable(&quot;change_password&quot;) { ChangePasswordScreen(navController) }&#10;                        composable(&quot;booking&quot;) { BookingScreen(navController) }&#10;                        composable(&quot;jadwal/{selectable}&quot;) { backStackEntry -&gt;&#10;                            val selectable = backStackEntry.arguments?.getString(&quot;selectable&quot;) == &quot;1&quot;&#10;                            BookingScreen(navController = navController, selectable = selectable)&#10;                        }&#10;                        composable(&quot;panduan&quot;) { PanduanScreen(innerPadding, navController) }&#10;                        composable(&quot;detail_ruangan/{roomKey}&quot;) { backStackEntry -&gt;&#10;                            val key = backStackEntry.arguments?.getString(&quot;roomKey&quot;).orEmpty()&#10;                            val roomName: String&#10;                            val images: List&lt;Int&gt;&#10;                            val description: String&#10;                            val capacity: Int&#10;                            val facilities: List&lt;String&gt;&#10;&#10;                            when (key) {&#10;                                &quot;ampliteather&quot; -&gt; {&#10;                                    roomName = &quot;Ruang Ampliteather&quot;&#10;                                    images = listOf(&#10;                                        R.drawable.amplifier_1,&#10;                                        R.drawable.amplifier_2,&#10;                                        R.drawable.amplifier_3&#10;                                    )&#10;                                    description = &quot;Ruang Ampliteather cocok untuk presentasi terbuka dan kegiatan komunitas dengan tata ruang tribun.&quot;&#10;                                    capacity = 60&#10;                                    facilities = listOf(&quot;Tribun bertingkat&quot;, &quot;Sound system&quot;, &quot;Panggung kecil&quot;)&#10;                                }&#10;                                &quot;tengah&quot; -&gt; {&#10;                                    roomName = &quot;Ruang Tengah&quot;&#10;                                    images = listOf(&#10;                                        R.drawable.tengah_1,&#10;                                        R.drawable.tengah_2,&#10;                                        R.drawable.tengah_3&#10;                                    )&#10;                                    description = &quot;Ruang serbaguna yang ideal untuk rapat, workshop, dan presentasi.&quot;&#10;                                    capacity = 30&#10;                                    facilities = listOf(&quot;Proyektor + layar&quot;, &quot;Kursi &amp; meja&quot;, &quot;Stop kontak&quot;)&#10;                                }&#10;                                &quot;outdor&quot; -&gt; {&#10;                                    roomName = &quot;Ruang Outdor&quot;&#10;                                    images = listOf(&#10;                                        R.drawable.belakang_1,&#10;                                        R.drawable.belakang_2,&#10;                                        R.drawable.belakang_3&#10;                                    )&#10;                                    description = &quot;Area luar ruangan cocok untuk diskusi santai atau acara komunitas.&quot;&#10;                                    capacity = 40&#10;                                    facilities = listOf(&quot;Area terbuka&quot;, &quot;Pencahayaan outdoor&quot;, &quot;Akses listrik terbatas&quot;)&#10;                                }&#10;                                else -&gt; {&#10;                                    roomName = &quot;Ruang Ampliteather&quot;&#10;                                    images = listOf(&#10;                                        R.drawable.amplifier_1,&#10;                                        R.drawable.amplifier_2,&#10;                                        R.drawable.amplifier_3&#10;                                    )&#10;                                    description = &quot;Ruang Ampliteather cocok untuk presentasi terbuka dan kegiatan komunitas dengan tata ruang tribun.&quot;&#10;                                    capacity = 60&#10;                                    facilities = listOf(&quot;Tribun bertingkat&quot;, &quot;Sound system&quot;, &quot;Panggung kecil&quot;)&#10;                                }&#10;                            }&#10;&#10;                            DetailRuangan(&#10;                                navController = navController,&#10;                                innerPadding = innerPadding,&#10;                                roomName = roomName,&#10;                                imageResources = images,&#10;                                description = description,&#10;                                capacity = capacity,&#10;                                facilities = facilities&#10;                            )&#10;                        }&#10;                        composable(&quot;form&quot;) { BookingFormScreen() }&#10;                        composable(&quot;review&quot;) { ReviewScreen(navController) }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/sebook/ui/theme/screens/Home.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/sebook/ui/theme/screens/Home.kt" />
              <option name="originalContent" value="package com.example.sebook.ui.theme.screens&#10;&#10;import android.net.Uri&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.compose.rememberNavController&#10;import com.example.sebook.R&#10;import com.example.sebook.ui.theme.components.BottomNavBar&#10;import com.example.sebook.ui.theme.components.CustomButton&#10;import androidx.compose.foundation.pager.HorizontalPager&#10;import androidx.compose.foundation.pager.rememberPagerState&#10;import androidx.compose.ui.graphics.graphicsLayer&#10;import androidx.compose.ui.util.lerp&#10;import kotlin.math.absoluteValue&#10;&#10;&#10;@Composable&#10;fun Home() {&#10;    // Wrapper untuk preview; aplikasi akan menampilkan HomeContent melalui NavHost di MainActivity&#10;    val previewNav = rememberNavController()&#10;    Scaffold(&#10;        bottomBar = {&#10;            BottomNavBar(navController = previewNav)&#10;        },&#10;        content = { innerPadding -&gt;&#10;            HomeContent(innerPadding, previewNav)&#10;        }&#10;    )&#10;}&#10;&#10;&#10;@Composable&#10;fun HomeContent(innerPadding: PaddingValues, navController: NavHostController) {&#10;    val pagerState = rememberPagerState(&#10;        initialPage = 0,&#10;        pageCount = { 3 }&#10;    )&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .verticalScroll(rememberScrollState())&#10;            .padding(innerPadding)  // Padding dari Scaffold&#10;            .background(Color.White)  // Menambahkan background putih pada Column&#10;&#10;    ) {&#10;        Spacer(modifier = Modifier.height(18.dp))&#10;&#10;        // Top Bar dengan Logo dan Profile&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 16.dp, vertical = 16.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;&#10;            // Logo SEBOOK&#10;            Image(&#10;                painter = painterResource(id = R.drawable.logo_sebook),&#10;                contentDescription = &quot;SEBOOK Logo&quot;,&#10;                modifier = Modifier&#10;                    .width(100.dp)&#10;                    .height(35.dp),&#10;                contentScale = ContentScale.Fit&#10;            )&#10;&#10;            // Profile Section&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                horizontalArrangement = Arrangement.End&#10;            ) {&#10;                Column(&#10;                    horizontalAlignment = Alignment.End,&#10;                    verticalArrangement = Arrangement.Center,&#10;                    modifier = Modifier.padding(end = 8.dp)&#10;                ) {&#10;                    // Notification Button with Badge&#10;                    Row(&#10;                        verticalAlignment = Alignment.CenterVertically,&#10;                        horizontalArrangement = Arrangement.End&#10;                    ) {&#10;                        Box {&#10;                            IconButton(&#10;                                onClick = { navController.navigate(&quot;notifications&quot;) },&#10;                                modifier = Modifier.size(45.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    painter = painterResource(id = R.drawable.ic_notification),&#10;                                    contentDescription = &quot;Notifications&quot;,&#10;                                    modifier = Modifier.size(28.dp),&#10;                                    tint = Color.Black&#10;                                )&#10;                            }&#10;&#10;                            // Badge notifikasi (contoh state sementara)&#10;                            val notificationCount by remember { mutableStateOf(5) }&#10;                            if (notificationCount &gt; 0) {&#10;                                Box(&#10;                                    modifier = Modifier&#10;                                        .size(20.dp)&#10;                                        .align(Alignment.TopEnd)&#10;                                        .offset(x = (-4).dp, y = 4.dp)&#10;                                        .clip(CircleShape)&#10;                                        .background(Color(0xFFFF3B30)),&#10;                                    contentAlignment = Alignment.Center&#10;                                ) {&#10;                                    Text(&#10;                                        text = if (notificationCount &gt; 9) &quot;9+&quot; else notificationCount.toString(),&#10;                                        color = Color.White,&#10;                                        fontSize = 10.sp,&#10;                                        fontWeight = FontWeight.Bold&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;&#10;                // Profile Image&#10;                Image(&#10;                    painter = painterResource(id = R.drawable.profile_placeholder),&#10;                    contentDescription = &quot;Profile Image&quot;,&#10;                    modifier = Modifier&#10;                        .size(45.dp)&#10;                        .clip(CircleShape)&#10;                        .border(2.dp, Color(0xFFF96300), CircleShape)&#10;                        .clickable { navController.navigate(&quot;profile&quot;) },&#10;                    contentScale = ContentScale.Crop&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        // Curved Background Section with &quot;Welcome&quot; text (placed in front)&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(200.dp)&#10;        ) {&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(horizontal = 16.dp)&#10;                    .height(300.dp)&#10;                    .align(Alignment.TopCenter),&#10;                shape = RoundedCornerShape(16.dp)&#10;            ) {&#10;                Box(modifier = Modifier.fillMaxSize()) {&#10;                    Image(&#10;                        painter = painterResource(id = R.drawable.profile_placeholder),&#10;                        contentDescription = &quot;Welcome Banner&quot;,&#10;                        contentScale = ContentScale.Crop,&#10;                        modifier = Modifier.fillMaxSize()&#10;                    )&#10;                    Image(&#10;                        painter = painterResource(id = R.drawable.rectangle_2),&#10;                        contentDescription = &quot;Curved Background&quot;,&#10;                        contentScale = ContentScale.FillWidth,&#10;                        alignment = Alignment.TopCenter,&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .offset(y = 150.dp)&#10;                            .align(Alignment.TopCenter)&#10;                    )&#10;&#10;                    Box(modifier = Modifier.fillMaxSize())&#10;&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .align(Alignment.BottomStart)&#10;                            .padding(14.dp)&#10;                            .offset(y = 35.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;Welcome,&quot;,&#10;                            fontSize = 26.sp,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Nama Pengguna and Booking Button Section&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 16.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = &quot;Pengguna&quot;,&#10;                fontWeight = FontWeight.SemiBold,&#10;                fontSize = 26.sp,&#10;                color = Color.Black,&#10;                modifier = Modifier.padding(start = 12.dp)&#10;            )&#10;&#10;            Column(&#10;                verticalArrangement = Arrangement.Center,&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                CustomButton(&#10;                    text = &quot;Booking&quot;,&#10;                    onClick = { navController.navigate(&quot;booking&quot;) },&#10;                    modifier = Modifier.padding(top = 12.dp)&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(40.dp))&#10;&#10;        // Informasi Ruangan Section&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 16.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = &quot;Informasi Ruangan&quot;,&#10;                fontSize = 18.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.Black&#10;            )&#10;&#10;            Text(&#10;                text = &quot;Selengkapnya&quot;,&#10;                fontSize = 13.sp,&#10;                color = Color(0xFF6B8E7F),&#10;                modifier = Modifier.clickable { navController.navigate(&quot;information&quot;) }&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        HorizontalPager(&#10;            state = pagerState,&#10;            contentPadding = PaddingValues(horizontal = 20.dp),&#10;            pageSpacing = 16.dp,&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) { page -&gt;&#10;            val pageOffset = (pagerState.currentPage - page) + pagerState.currentPageOffsetFraction&#10;            val scale = lerp(&#10;                start = 0.85f,&#10;                stop = 1f,&#10;                fraction = 1f - pageOffset.absoluteValue.coerceIn(0f, 1f)&#10;            )&#10;&#10;            val (roomName, roomKey, imageRes) = when (page) {&#10;                0 -&gt; Triple(&quot;Ruang Ampliteather&quot;, &quot;ampliteather&quot;, R.drawable.amplifier_1)&#10;                1 -&gt; Triple(&quot;Ruang Tengah&quot;, &quot;tengah&quot;, R.drawable.tengah_2)&#10;                2 -&gt; Triple(&quot;Ruang Outdor&quot;, &quot;outdor&quot;, R.drawable.belakang_1)&#10;                else -&gt; Triple(&quot;Ruang Ampliteather&quot;, &quot;ampliteather&quot;, R.drawable.amplifier_1)&#10;            }&#10;&#10;            RoomCard(&#10;                roomName = roomName,&#10;                onClick = { navController.navigate(&quot;detail_ruangan/$roomKey&quot;) },&#10;                imageResourceId = imageRes,&#10;                scale = scale&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.Center&#10;        ) {&#10;            repeat(3) { index -&gt;&#10;                Box(&#10;                    modifier = Modifier&#10;                        .padding(horizontal = 4.dp)&#10;                        .size(if (pagerState.currentPage == index) 10.dp else 8.dp)&#10;                        .clip(CircleShape)&#10;                        .background(&#10;                            if (pagerState.currentPage == index) Color(0xFFFF8C00)&#10;                            else Color(0xFFD9D9D9)&#10;                        )&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;    }&#10;}&#10;&#10;@Composable&#10;fun RoomCard(&#10;    roomName: String,&#10;    onClick: () -&gt; Unit,&#10;    imageResourceId: Int,&#10;    scale: Float = 1f&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .wrapContentHeight()&#10;            .padding(horizontal = 16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(240.dp)&#10;                .graphicsLayer {&#10;                    scaleX = scale&#10;                    scaleY = scale&#10;                }&#10;                .clickable { onClick() },&#10;            shape = RoundedCornerShape(16.dp),&#10;            colors = CardDefaults.cardColors(containerColor = Color.White)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.fillMaxSize()&#10;            ) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(190.dp)&#10;                        .clip(RoundedCornerShape(16.dp))&#10;                ) {&#10;                    Image(&#10;                        painter = painterResource(id = imageResourceId),&#10;                        contentScale = ContentScale.Crop,&#10;                        contentDescription = roomName,&#10;                        modifier = Modifier.fillMaxSize()&#10;                    )&#10;                }&#10;&#10;                Text(&#10;                    text = roomName,&#10;                    fontSize = 15.sp,&#10;                    fontWeight = FontWeight.SemiBold,&#10;                    color = Color.Black,&#10;                    textAlign = TextAlign.Center,&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(vertical = 16.dp)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun HomePreview() {&#10;    Home()&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.sebook.ui.theme.screens&#10;&#10;import android.net.Uri&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.compose.rememberNavController&#10;import com.example.sebook.R&#10;import com.example.sebook.ui.theme.components.BottomNavBar&#10;import com.example.sebook.ui.theme.components.CustomButton&#10;import androidx.compose.foundation.pager.HorizontalPager&#10;import androidx.compose.foundation.pager.rememberPagerState&#10;import androidx.compose.ui.graphics.graphicsLayer&#10;import androidx.compose.ui.util.lerp&#10;import kotlin.math.absoluteValue&#10;&#10;&#10;@Composable&#10;fun Home() {&#10;    // Wrapper untuk preview; aplikasi akan menampilkan HomeContent melalui NavHost di MainActivity&#10;    val previewNav = rememberNavController()&#10;    Scaffold(&#10;        bottomBar = {&#10;            BottomNavBar(navController = previewNav)&#10;        },&#10;        content = { innerPadding -&gt;&#10;            HomeContent(innerPadding, previewNav)&#10;        }&#10;    )&#10;}&#10;&#10;&#10;@Composable&#10;fun HomeContent(innerPadding: PaddingValues, navController: NavHostController) {&#10;    val pagerState = rememberPagerState(&#10;        initialPage = 0,&#10;        pageCount = { 3 }&#10;    )&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .verticalScroll(rememberScrollState())&#10;            .padding(innerPadding)  // Padding dari Scaffold&#10;            .background(Color.White)  // Menambahkan background putih pada Column&#10;&#10;    ) {&#10;        Spacer(modifier = Modifier.height(18.dp))&#10;&#10;        // Top Bar dengan Logo dan Profile&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 16.dp, vertical = 16.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;&#10;            // Logo SEBOOK&#10;            Image(&#10;                painter = painterResource(id = R.drawable.logo_sebook),&#10;                contentDescription = &quot;SEBOOK Logo&quot;,&#10;                modifier = Modifier&#10;                    .width(100.dp)&#10;                    .height(35.dp),&#10;                contentScale = ContentScale.Fit&#10;            )&#10;&#10;            // Profile Section&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                horizontalArrangement = Arrangement.End&#10;            ) {&#10;                Column(&#10;                    horizontalAlignment = Alignment.End,&#10;                    verticalArrangement = Arrangement.Center,&#10;                    modifier = Modifier.padding(end = 8.dp)&#10;                ) {&#10;                    // Notification Button with Badge&#10;                    Row(&#10;                        verticalAlignment = Alignment.CenterVertically,&#10;                        horizontalArrangement = Arrangement.End&#10;                    ) {&#10;                        Box {&#10;                            IconButton(&#10;                                onClick = { navController.navigate(&quot;notifications&quot;) },&#10;                                modifier = Modifier.size(45.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    painter = painterResource(id = R.drawable.ic_notification),&#10;                                    contentDescription = &quot;Notifications&quot;,&#10;                                    modifier = Modifier.size(28.dp),&#10;                                    tint = Color.Black&#10;                                )&#10;                            }&#10;&#10;                            // Badge notifikasi (contoh state sementara)&#10;                            val notificationCount by remember { mutableStateOf(5) }&#10;                            if (notificationCount &gt; 0) {&#10;                                Box(&#10;                                    modifier = Modifier&#10;                                        .size(20.dp)&#10;                                        .align(Alignment.TopEnd)&#10;                                        .offset(x = (-4).dp, y = 4.dp)&#10;                                        .clip(CircleShape)&#10;                                        .background(Color(0xFFFF3B30)),&#10;                                    contentAlignment = Alignment.Center&#10;                                ) {&#10;                                    Text(&#10;                                        text = if (notificationCount &gt; 9) &quot;9+&quot; else notificationCount.toString(),&#10;                                        color = Color.White,&#10;                                        fontSize = 10.sp,&#10;                                        fontWeight = FontWeight.Bold&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;&#10;                // Profile Image&#10;                Image(&#10;                    painter = painterResource(id = R.drawable.profile_placeholder),&#10;                    contentDescription = &quot;Profile Image&quot;,&#10;                    modifier = Modifier&#10;                        .size(45.dp)&#10;                        .clip(CircleShape)&#10;                        .border(2.dp, Color(0xFFF96300), CircleShape)&#10;                        .clickable { navController.navigate(&quot;profile&quot;) },&#10;                    contentScale = ContentScale.Crop&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        // Curved Background Section with &quot;Welcome&quot; text (placed in front)&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(200.dp)&#10;        ) {&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(horizontal = 16.dp)&#10;                    .height(300.dp)&#10;                    .align(Alignment.TopCenter),&#10;                shape = RoundedCornerShape(16.dp)&#10;            ) {&#10;                Box(modifier = Modifier.fillMaxSize()) {&#10;                    Image(&#10;                        painter = painterResource(id = R.drawable.profile_placeholder),&#10;                        contentDescription = &quot;Welcome Banner&quot;,&#10;                        contentScale = ContentScale.Crop,&#10;                        modifier = Modifier.fillMaxSize()&#10;                    )&#10;                    Image(&#10;                        painter = painterResource(id = R.drawable.rectangle_2),&#10;                        contentDescription = &quot;Curved Background&quot;,&#10;                        contentScale = ContentScale.FillWidth,&#10;                        alignment = Alignment.TopCenter,&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .offset(y = 150.dp)&#10;                            .align(Alignment.TopCenter)&#10;                    )&#10;&#10;                    Box(modifier = Modifier.fillMaxSize())&#10;&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .align(Alignment.BottomStart)&#10;                            .padding(14.dp)&#10;                            .offset(y = 35.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;Welcome,&quot;,&#10;                            fontSize = 26.sp,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Nama Pengguna and Booking Button Section&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 16.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = &quot;Pengguna&quot;,&#10;                fontWeight = FontWeight.SemiBold,&#10;                fontSize = 26.sp,&#10;                color = Color.Black,&#10;                modifier = Modifier.padding(start = 12.dp)&#10;            )&#10;&#10;            Column(&#10;                verticalArrangement = Arrangement.Center,&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                CustomButton(&#10;                    text = &quot;Booking&quot;,&#10;                    onClick = { navController.navigate(&quot;booking&quot;) },&#10;                    modifier = Modifier.padding(top = 12.dp)&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(40.dp))&#10;&#10;        // Informasi Ruangan Section&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 16.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = &quot;Informasi Ruangan&quot;,&#10;                fontSize = 18.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.Black&#10;            )&#10;&#10;            Text(&#10;                text = &quot;Selengkapnya&quot;,&#10;                fontSize = 13.sp,&#10;                color = Color(0xFF6B8E7F),&#10;                modifier = Modifier.clickable { navController.navigate(&quot;information&quot;) }&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        HorizontalPager(&#10;            state = pagerState,&#10;            contentPadding = PaddingValues(horizontal = 20.dp),&#10;            pageSpacing = 16.dp,&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) { page -&gt;&#10;            val pageOffset = (pagerState.currentPage - page) + pagerState.currentPageOffsetFraction&#10;            val scale = lerp(&#10;                start = 0.85f,&#10;                stop = 1f,&#10;                fraction = 1f - pageOffset.absoluteValue.coerceIn(0f, 1f)&#10;            )&#10;&#10;            val (roomName, roomKey, imageRes) = when (page) {&#10;                0 -&gt; Triple(&quot;Ruang Ampliteather&quot;, &quot;ampliteather&quot;, R.drawable.amplifier_1)&#10;                1 -&gt; Triple(&quot;Ruang Tengah&quot;, &quot;tengah&quot;, R.drawable.tengah_2)&#10;                2 -&gt; Triple(&quot;Ruang Outdor&quot;, &quot;outdor&quot;, R.drawable.belakang_1)&#10;                else -&gt; Triple(&quot;Ruang Ampliteather&quot;, &quot;ampliteather&quot;, R.drawable.amplifier_1)&#10;            }&#10;&#10;            RoomCard(&#10;                roomName = roomName,&#10;                onClick = { navController.navigate(&quot;detail_ruangan/$roomKey&quot;) },&#10;                imageResourceId = imageRes,&#10;                scale = scale&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.Center&#10;        ) {&#10;            repeat(3) { index -&gt;&#10;                Box(&#10;                    modifier = Modifier&#10;                        .padding(horizontal = 4.dp)&#10;                        .size(if (pagerState.currentPage == index) 10.dp else 8.dp)&#10;                        .clip(CircleShape)&#10;                        .background(&#10;                            if (pagerState.currentPage == index) Color(0xFFFF8C00)&#10;                            else Color(0xFFD9D9D9)&#10;                        )&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;    }&#10;}&#10;&#10;@Composable&#10;fun RoomCard(&#10;    roomName: String,&#10;    onClick: () -&gt; Unit,&#10;    imageResourceId: Int,&#10;    scale: Float = 1f&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .wrapContentHeight()&#10;            .padding(horizontal = 16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(240.dp)&#10;                .graphicsLayer {&#10;                    scaleX = scale&#10;                    scaleY = scale&#10;                }&#10;                .clickable { onClick() },&#10;            shape = RoundedCornerShape(16.dp),&#10;            colors = CardDefaults.cardColors(containerColor = Color.White)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.fillMaxSize()&#10;            ) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(190.dp)&#10;                        .clip(RoundedCornerShape(16.dp))&#10;                ) {&#10;                    Image(&#10;                        painter = painterResource(id = imageResourceId),&#10;                        contentScale = ContentScale.Crop,&#10;                        contentDescription = roomName,&#10;                        modifier = Modifier.fillMaxSize()&#10;                    )&#10;                }&#10;&#10;                Text(&#10;                    text = roomName,&#10;                    fontSize = 15.sp,&#10;                    fontWeight = FontWeight.SemiBold,&#10;                    color = Color.Black,&#10;                    textAlign = TextAlign.Center,&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(vertical = 16.dp)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun HomePreview() {&#10;    Home()&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/sebook/ui/theme/screens/Regist.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/sebook/ui/theme/screens/Regist.kt" />
              <option name="originalContent" value="package com.example.sebook.ui.theme.screens&#10;&#10;import android.util.Patterns&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.shadow&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.TextStyle&#10;import androidx.compose.ui.text.font.Font&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.KeyboardCapitalization&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.sebook.R&#10;import com.example.sebook.ui.theme.components.CustomButton&#10;import com.example.sebook.ui.theme.components.CustomTextField&#10;import androidx.compose.ui.text.input.ImeAction&#10;&#10;@Composable&#10;fun Regist(onRegisterClick: () -&gt; Unit) {&#10;    var fullName by remember { mutableStateOf(&quot;&quot;) }&#10;    val nameInvalid = fullName.isNotBlank() &amp;&amp; (&#10;            fullName.trim().split(Regex(&quot;\\s+&quot;)).size &lt; 2 || fullName.any { it.isDigit() }&#10;            )&#10;&#10;    var username by remember { mutableStateOf(&quot;&quot;) }&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    val emailInvalid = email.isNotBlank() &amp;&amp;&#10;            !Patterns.EMAIL_ADDRESS.matcher(email).matches()&#10;&#10;    val canSubmit = email.isNotBlank() &amp;&amp; !emailInvalid&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color.White)&#10;    ) {&#10;        Image(&#10;            painter = painterResource(id = R.drawable.rectangle_1), // Assuming this is the new rectangle image for the wave&#10;            contentDescription = &quot;Rectangle Wave&quot;,&#10;            contentScale = ContentScale.FillWidth,&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(120.dp) // Decrease height if needed&#10;                .align(Alignment.TopCenter) // Place it at the top of the screen&#10;                .offset(y = -2.dp) // Shift image higher&#10;        )&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(horizontal = 24.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Spacer(modifier = Modifier.height(80.dp))&#10;&#10;            // Logo SEBOOK&#10;            Image(&#10;                painter = painterResource(id = R.drawable.logo_sebook),&#10;                contentDescription = &quot;SEBOOK Logo&quot;,&#10;                modifier = Modifier&#10;                    .width(280.dp)&#10;                    .height(80.dp),&#10;                contentScale = ContentScale.Fit&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(48.dp))&#10;&#10;            // Register Title&#10;            Text(&#10;                text = &quot;REGISTER&quot;,&#10;                fontSize = 24.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color(0xFF1A2B3C),&#10;                modifier = Modifier.align(Alignment.Start),&#10;                fontFamily = FontFamily(Font(R.font.spacegrotesk_bold)),&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            CustomTextField(&#10;                value = fullName,&#10;                onValueChange = { fullName = it },&#10;                label = &quot;Full Name&quot;,&#10;                placeholder = &quot;Nama Lengkap&quot;,&#10;                keyboardType = KeyboardType.Text,&#10;                capitalization = KeyboardCapitalization.Words,&#10;                imeAction = ImeAction.Next,&#10;                isError = nameInvalid,&#10;                supportingText = if (nameInvalid) &quot;Tulis nama lengkap (tanpa angka)&quot; else null&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // Username only&#10;            CustomTextField(&#10;                value = username,&#10;                onValueChange = { username = it },&#10;                label = &quot;Username&quot;,&#10;                placeholder = &quot;nama_pengguna&quot;,&#10;                keyboardType = KeyboardType.Text,&#10;                capitalization = KeyboardCapitalization.None,&#10;                imeAction = ImeAction.Done&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // Email Field&#10;            CustomTextField(&#10;                value = email,&#10;                onValueChange = { email = it },&#10;                label = &quot;Email&quot;,&#10;                placeholder = &quot;nama@domain.com&quot;,&#10;                keyboardType = KeyboardType.Email,&#10;                imeAction = ImeAction.Done,&#10;                isError = emailInvalid,&#10;                supportingText = if (emailInvalid) &quot;Format email tidak valid&quot; else null&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // Password Field&#10;            CustomTextField(&#10;                value = password,&#10;                onValueChange = { password = it },&#10;                label = &quot;Password&quot;,&#10;                placeholder = &quot;minimal 8 karakter&quot;,&#10;                isPassword = true,&#10;                imeAction = ImeAction.Done&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(74.dp))&#10;            CustomButton(&#10;                text = &quot;DAFTAR&quot;,&#10;                onClick = onRegisterClick,&#10;                modifier = Modifier&#10;                    .align(Alignment.End)&#10;            )&#10;&#10;            // Add some space before the background image&#10;        }&#10;&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true, showSystemUi = true)&#10;@Composable&#10;fun RegistPreview() {&#10;    MaterialTheme {&#10;        Regist(onRegisterClick = { /* Handle register logic here */ })&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.sebook.ui.theme.screens&#10;&#10;import android.util.Patterns&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.shadow&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.TextStyle&#10;import androidx.compose.ui.text.font.Font&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.KeyboardCapitalization&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.sebook.R&#10;import com.example.sebook.ui.theme.components.CustomButton&#10;import com.example.sebook.ui.theme.components.CustomTextField&#10;import androidx.compose.ui.text.input.ImeAction&#10;&#10;@Composable&#10;fun Regist(onRegisterClick: () -&gt; Unit) {&#10;    var fullName by remember { mutableStateOf(&quot;&quot;) }&#10;    val nameInvalid = fullName.isNotBlank() &amp;&amp; (&#10;            fullName.trim().split(Regex(&quot;\\s+&quot;)).size &lt; 2 || fullName.any { it.isDigit() }&#10;            )&#10;&#10;    var username by remember { mutableStateOf(&quot;&quot;) }&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    val emailInvalid = email.isNotBlank() &amp;&amp;&#10;            !Patterns.EMAIL_ADDRESS.matcher(email).matches()&#10;&#10;    val canSubmit = email.isNotBlank() &amp;&amp; !emailInvalid&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color.White)&#10;    ) {&#10;        Image(&#10;            painter = painterResource(id = R.drawable.rectangle_1), // Assuming this is the new rectangle image for the wave&#10;            contentDescription = &quot;Rectangle Wave&quot;,&#10;            contentScale = ContentScale.FillWidth,&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(120.dp) // Decrease height if needed&#10;                .align(Alignment.TopCenter) // Place it at the top of the screen&#10;                .offset(y = -2.dp) // Shift image higher&#10;        )&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(horizontal = 24.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Spacer(modifier = Modifier.height(80.dp))&#10;&#10;            // Logo SEBOOK&#10;            Image(&#10;                painter = painterResource(id = R.drawable.logo_sebook),&#10;                contentDescription = &quot;SEBOOK Logo&quot;,&#10;                modifier = Modifier&#10;                    .width(280.dp)&#10;                    .height(80.dp),&#10;                contentScale = ContentScale.Fit&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(48.dp))&#10;&#10;            // Register Title&#10;            Text(&#10;                text = &quot;REGISTER&quot;,&#10;                fontSize = 24.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color(0xFF1A2B3C),&#10;                modifier = Modifier.align(Alignment.Start),&#10;                fontFamily = FontFamily(Font(R.font.spacegrotesk_bold)),&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            CustomTextField(&#10;                value = fullName,&#10;                onValueChange = { fullName = it },&#10;                label = &quot;Full Name&quot;,&#10;                placeholder = &quot;Nama Lengkap&quot;,&#10;                keyboardType = KeyboardType.Text,&#10;                capitalization = KeyboardCapitalization.Words,&#10;                imeAction = ImeAction.Next,&#10;                isError = nameInvalid,&#10;                supportingText = if (nameInvalid) &quot;Tulis nama lengkap (tanpa angka)&quot; else null&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // Username only&#10;            CustomTextField(&#10;                value = username,&#10;                onValueChange = { username = it },&#10;                label = &quot;Username&quot;,&#10;                placeholder = &quot;nama_pengguna&quot;,&#10;                keyboardType = KeyboardType.Text,&#10;                capitalization = KeyboardCapitalization.None,&#10;                imeAction = ImeAction.Done&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // Email Field&#10;            CustomTextField(&#10;                value = email,&#10;                onValueChange = { email = it },&#10;                label = &quot;Email&quot;,&#10;                placeholder = &quot;nama@domain.com&quot;,&#10;                keyboardType = KeyboardType.Email,&#10;                imeAction = ImeAction.Done,&#10;                isError = emailInvalid,&#10;                supportingText = if (emailInvalid) &quot;Format email tidak valid&quot; else null&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // Password Field&#10;            CustomTextField(&#10;                value = password,&#10;                onValueChange = { password = it },&#10;                label = &quot;Password&quot;,&#10;                placeholder = &quot;minimal 8 karakter&quot;,&#10;                isPassword = true,&#10;                imeAction = ImeAction.Done&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(74.dp))&#10;            CustomButton(&#10;                text = &quot;DAFTAR&quot;,&#10;                onClick = onRegisterClick,&#10;                modifier = Modifier&#10;                    .align(Alignment.End)&#10;            )&#10;&#10;            // Add some space before the background image&#10;        }&#10;&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true, showSystemUi = true)&#10;@Composable&#10;fun RegistPreview() {&#10;    MaterialTheme {&#10;        Regist(onRegisterClick = { /* Handle register logic here */ })&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/sebook/ui/theme/screens/informasi/panduan.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/sebook/ui/theme/screens/informasi/panduan.kt" />
              <option name="originalContent" value="package com.example.sebook.ui.theme.screens.panduan&#10;&#10;import android.content.Context&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.Font&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.compose.ui.viewinterop.AndroidView&#10;import androidx.navigation.NavController&#10;import androidx.navigation.compose.rememberNavController&#10;import com.example.sebook.R&#10;import com.example.sebook.ui.theme.components.CustomButton&#10;import com.github.barteksc.pdfviewer.PDFView&#10;import java.io.File&#10;import java.io.FileOutputStream&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun PanduanScreen(innerPadding: PaddingValues, navController: NavController) {&#10;&#10;    val context = LocalContext.current&#10;    Scaffold(&#10;        topBar = {&#10;            CenterAlignedTopAppBar(&#10;                title = {&#10;                    Text(&#10;                        text = &quot;Panduan&quot;,&#10;                        fontSize = 18.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        fontFamily = FontFamily(Font(R.font.poppins_bold))&#10;                    )&#10;                },&#10;                navigationIcon = {&#10;                    androidx.compose.material3.IconButton(onClick = { navController.popBackStack() }) {&#10;                        androidx.compose.material3.Icon(&#10;                            imageVector = Icons.Filled.ArrowBack,&#10;                            contentDescription = &quot;Back&quot;&#10;                        )&#10;                    }&#10;                },&#10;                colors = TopAppBarDefaults.centerAlignedTopAppBarColors(&#10;                    containerColor = Color.White&#10;                ),&#10;                windowInsets = WindowInsets(top = 24.dp)&#10;            )&#10;        },&#10;        content = { paddingValues -&gt;&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(paddingValues)&#10;            ) {&#10;                // Kolom utama untuk konten&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .padding(innerPadding)&#10;                        .padding(bottom = 100.dp)&#10;                        .padding(16.dp)&#10;                        .verticalScroll(rememberScrollState())&#10;                ) {&#10;                    Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                    // Judul Halaman&#10;                    Text(&#10;                        text = &quot;Panduan Peminjaman&quot;,&#10;                        fontSize = 20.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        fontFamily = FontFamily(Font(R.font.poppins_bold)),&#10;                        modifier = Modifier.padding(bottom = 16.dp)&#10;                    )&#10;&#10;                    // PDF Viewer Card&#10;                    Card(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(10.dp)&#10;                            .height(450.dp),&#10;                        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;                    ) {&#10;                        PDFViewScreen()&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(24.dp))&#10;&#10;                    // Tombol Download di pojok kanan&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.End&#10;                    ) {&#10;                        CustomButton(&#10;                            text = &quot;Download&quot;,&#10;                            onClick = { downloadPDF(context) }&#10;                        )&#10;                    }&#10;                }&#10;&#10;                // Gambar gelombang hijau di bawah halaman&#10;                Image(&#10;                    painter = painterResource(id = R.drawable.rectangle_4),&#10;                    contentDescription = &quot;Gelombang Hijau&quot;,&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .offset(y = 40.dp)&#10;                        .align(Alignment.BottomCenter),&#10;                    contentScale = ContentScale.FillWidth&#10;                )&#10;            }&#10;        }&#10;    )&#10;}&#10;&#10;@Composable&#10;fun PDFViewScreen() {&#10;    val context = LocalContext.current&#10;&#10;    AndroidView(&#10;        factory = { ctx -&gt;&#10;            PDFView(ctx, null).apply {&#10;                fromStream(ctx.resources.openRawResource(R.raw.panduan))&#10;                    .enableSwipe(true)&#10;                    .swipeHorizontal(false)&#10;                    .enableDoubletap(true)&#10;                    .defaultPage(0)&#10;                    .enableAnnotationRendering(true)&#10;                    .spacing(10)&#10;                    .onError { _ -&gt;&#10;                        android.widget.Toast.makeText(&#10;                            ctx,&#10;                            &quot;Error&quot;,&#10;                            android.widget.Toast.LENGTH_SHORT&#10;                        ).show()&#10;                    }&#10;                    .load()&#10;            }&#10;        },&#10;        modifier = Modifier.fillMaxSize()&#10;    )&#10;}&#10;&#10;// Fungsi untuk download PDF ke storage&#10;fun downloadPDF(context: Context) {&#10;    try {&#10;        val inputStream = context.resources.openRawResource(R.raw.panduan)&#10;        val downloadFolder = File(context.getExternalFilesDir(null), &quot;Downloads&quot;)&#10;        if (!downloadFolder.exists()) {&#10;            downloadFolder.mkdirs()&#10;        }&#10;        val file = File(downloadFolder, &quot;Panduan_Peminjaman.pdf&quot;)&#10;        val outputStream = FileOutputStream(file)&#10;        inputStream.copyTo(outputStream)&#10;        inputStream.close()&#10;        outputStream.close()&#10;        android.widget.Toast.makeText(&#10;            context,&#10;            &quot;PDF berhasil didownload!\nLokasi: ${file.absolutePath}&quot;,&#10;            android.widget.Toast.LENGTH_LONG&#10;        ).show()&#10;    } catch (e: Exception) {&#10;        android.widget.Toast.makeText(&#10;            context,&#10;            &quot;Gagal download PDF: ${e.message}&quot;,&#10;            android.widget.Toast.LENGTH_SHORT&#10;        ).show()&#10;        e.printStackTrace()&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun PreviewPanduanScreen() {&#10;    PanduanScreen(innerPadding = PaddingValues(0.dp), navController = rememberNavController())&#10;}" />
              <option name="updatedContent" value="package com.example.sebook.ui.theme.screens.panduan&#10;&#10;import android.content.Context&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.Font&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.compose.ui.viewinterop.AndroidView&#10;import androidx.navigation.NavController&#10;import androidx.navigation.compose.rememberNavController&#10;import com.example.sebook.R&#10;import com.example.sebook.ui.theme.components.CustomButton&#10;import com.github.barteksc.pdfviewer.PDFView&#10;import java.io.File&#10;import java.io.FileOutputStream&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun PanduanScreen(innerPadding: PaddingValues, navController: NavController) {&#10;&#10;    val context = LocalContext.current&#10;    Scaffold(&#10;        topBar = {&#10;            CenterAlignedTopAppBar(&#10;                title = {&#10;                    Text(&#10;                        text = &quot;Panduan&quot;,&#10;                        fontSize = 18.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        fontFamily = FontFamily(Font(R.font.poppins_bold))&#10;                    )&#10;                },&#10;                navigationIcon = {&#10;                    androidx.compose.material3.IconButton(onClick = { navController.popBackStack() }) {&#10;                        androidx.compose.material3.Icon(&#10;                            imageVector = Icons.Filled.ArrowBack,&#10;                            contentDescription = &quot;Back&quot;&#10;                        )&#10;                    }&#10;                },&#10;                colors = TopAppBarDefaults.centerAlignedTopAppBarColors(&#10;                    containerColor = Color.White&#10;                ),&#10;                windowInsets = WindowInsets(top = 24.dp)&#10;            )&#10;        },&#10;        content = { paddingValues -&gt;&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(paddingValues)&#10;            ) {&#10;                // Kolom utama untuk konten&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .padding(innerPadding)&#10;                        .padding(bottom = 100.dp)&#10;                        .padding(16.dp)&#10;                        .verticalScroll(rememberScrollState())&#10;                ) {&#10;                    Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                    // Judul Halaman&#10;                    Text(&#10;                        text = &quot;Panduan Peminjaman&quot;,&#10;                        fontSize = 20.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        fontFamily = FontFamily(Font(R.font.poppins_bold)),&#10;                        modifier = Modifier.padding(bottom = 16.dp)&#10;                    )&#10;&#10;                    // PDF Viewer Card&#10;                    Card(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(10.dp)&#10;                            .height(450.dp),&#10;                        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;                    ) {&#10;                        PDFViewScreen()&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(24.dp))&#10;&#10;                    // Tombol Download di pojok kanan&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.End&#10;                    ) {&#10;                        CustomButton(&#10;                            text = &quot;Download&quot;,&#10;                            onClick = { downloadPDF(context) }&#10;                        )&#10;                    }&#10;                }&#10;&#10;                // Gambar gelombang hijau di bawah halaman&#10;                Image(&#10;                    painter = painterResource(id = R.drawable.rectangle_4),&#10;                    contentDescription = &quot;Gelombang Hijau&quot;,&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .offset(y = 40.dp)&#10;                        .align(Alignment.BottomCenter),&#10;                    contentScale = ContentScale.FillWidth&#10;                )&#10;            }&#10;        }&#10;    )&#10;}&#10;&#10;@Composable&#10;fun PDFViewScreen() {&#10;    val context = LocalContext.current&#10;&#10;    AndroidView(&#10;        factory = { ctx -&gt;&#10;            PDFView(ctx, null).apply {&#10;                fromStream(ctx.resources.openRawResource(R.raw.panduan))&#10;                    .enableSwipe(true)&#10;                    .swipeHorizontal(false)&#10;                    .enableDoubletap(true)&#10;                    .defaultPage(0)&#10;                    .enableAnnotationRendering(true)&#10;                    .spacing(10)&#10;                    .onError { _ -&gt;&#10;                        android.widget.Toast.makeText(&#10;                            ctx,&#10;                            &quot;Error&quot;,&#10;                            android.widget.Toast.LENGTH_SHORT&#10;                        ).show()&#10;                    }&#10;                    .load()&#10;            }&#10;        },&#10;        modifier = Modifier.fillMaxSize()&#10;    )&#10;}&#10;&#10;// Fungsi untuk download PDF ke storage&#10;fun downloadPDF(context: Context) {&#10;    try {&#10;        val inputStream = context.resources.openRawResource(R.raw.panduan)&#10;        val downloadFolder = File(context.getExternalFilesDir(null), &quot;Downloads&quot;)&#10;        if (!downloadFolder.exists()) {&#10;            downloadFolder.mkdirs()&#10;        }&#10;        val file = File(downloadFolder, &quot;Panduan_Peminjaman.pdf&quot;)&#10;        val outputStream = FileOutputStream(file)&#10;        inputStream.copyTo(outputStream)&#10;        inputStream.close()&#10;        outputStream.close()&#10;        android.widget.Toast.makeText(&#10;            context,&#10;            &quot;PDF berhasil didownload!\nLokasi: ${file.absolutePath}&quot;,&#10;            android.widget.Toast.LENGTH_LONG&#10;        ).show()&#10;    } catch (e: Exception) {&#10;        android.widget.Toast.makeText(&#10;            context,&#10;            &quot;Gagal download PDF: ${e.message}&quot;,&#10;            android.widget.Toast.LENGTH_SHORT&#10;        ).show()&#10;        e.printStackTrace()&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun PreviewPanduanScreen() {&#10;    PanduanScreen(innerPadding = PaddingValues(0.dp), navController = rememberNavController())&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/sebook/ui/theme/screens/informasi/ruangan.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/sebook/ui/theme/screens/informasi/ruangan.kt" />
              <option name="originalContent" value="package com.example.sebook.ui.theme.screens.informasi&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.material3.Text&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.text.font.Font&#10;import androidx.compose.ui.text.font.FontFamily&#10;import com.example.sebook.R&#10;import com.example.sebook.ui.theme.components.CustomButton&#10;import com.example.sebook.ui.theme.components.RoomCard&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.navigation.NavController&#10;import androidx.navigation.compose.rememberNavController&#10;&#10;@Composable&#10;fun RuanganDiSakato(innerPadding: PaddingValues, navController: NavController) {&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;    ) {&#10;        // Konten utama dapat di-scroll&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .verticalScroll(rememberScrollState())&#10;                .padding(innerPadding)&#10;                .padding(bottom = 100.dp) // ruang untuk gelombang di bawah&#10;                .padding(16.dp) // padding konten&#10;        ) {&#10;            Spacer(modifier = Modifier.height(13.dp))&#10;&#10;            // Logo SEBOOK&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 16.dp),&#10;                horizontalArrangement = Arrangement.Start&#10;            ) {&#10;                Image(&#10;                    painter = painterResource(id = R.drawable.logo_sebook),&#10;                    contentDescription = &quot;SEBOOK Logo&quot;,&#10;                    modifier = Modifier&#10;                        .width(100.dp)&#10;                        .height(35.dp),&#10;                    contentScale = ContentScale.Fit&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(18.dp))&#10;&#10;            // Judul Halaman&#10;            Text(&#10;                text = &quot;Ruangan di Sakato&quot;,&#10;                fontSize = 20.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                fontFamily = FontFamily(Font(R.font.poppins_bold)),&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;&#10;            // Daftar Ruangan&#10;            Column(&#10;                verticalArrangement = Arrangement.spacedBy(12.dp)&#10;            ) {&#10;                RoomCard(&#10;                    roomName = &quot;Ruang Ampliteather&quot;,&#10;                    onClick = { navController.navigate(&quot;detail_ruangan/ampliteather&quot;) },&#10;                    imageResourceId = R.drawable.amplifier_1&#10;                )&#10;                RoomCard(&#10;                    roomName = &quot;Ruang Tengah&quot;,&#10;                    onClick = { navController.navigate(&quot;detail_ruangan/tengah&quot;) },&#10;                    imageResourceId = R.drawable.tengah_2&#10;                )&#10;                RoomCard(&#10;                    roomName = &quot;Ruang Outdor&quot;,&#10;                    onClick = { navController.navigate(&quot;detail_ruangan/outdor&quot;) },&#10;                    imageResourceId = R.drawable.belakang_1&#10;                )&#10;            }&#10;&#10;            // Tombol Panduan di pojok kanan&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.End&#10;            ) {&#10;                CustomButton(&#10;                    text = &quot;Panduan&quot;,&#10;                    onClick = { navController.navigate(&quot;panduan&quot;) }&#10;                )&#10;            }&#10;        }&#10;&#10;        // Gambar gelombang hijau di bawah (overlay)&#10;        Image(&#10;            painter = painterResource(id = R.drawable.rectangle_4),&#10;            contentDescription = &quot;Gelombang Hijau&quot;,&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .offset(y = 40.dp)&#10;                .align(Alignment.BottomCenter),&#10;            contentScale = ContentScale.FillWidth&#10;        )&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun PreviewRuanganDiSakato() {&#10;    RuanganDiSakato(innerPadding = PaddingValues(0.dp), navController = rememberNavController())&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.sebook.ui.theme.screens.informasi&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.material3.Text&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.text.font.Font&#10;import androidx.compose.ui.text.font.FontFamily&#10;import com.example.sebook.R&#10;import com.example.sebook.ui.theme.components.CustomButton&#10;import com.example.sebook.ui.theme.components.RoomCard&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.navigation.NavController&#10;import androidx.navigation.compose.rememberNavController&#10;&#10;@Composable&#10;fun RuanganDiSakato(innerPadding: PaddingValues, navController: NavController) {&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;    ) {&#10;        // Konten utama dapat di-scroll&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .verticalScroll(rememberScrollState())&#10;                .padding(innerPadding)&#10;                .padding(bottom = 100.dp) // ruang untuk gelombang di bawah&#10;                .padding(16.dp) // padding konten&#10;        ) {&#10;            Spacer(modifier = Modifier.height(13.dp))&#10;&#10;            // Logo SEBOOK&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 16.dp),&#10;                horizontalArrangement = Arrangement.Start&#10;            ) {&#10;                Image(&#10;                    painter = painterResource(id = R.drawable.logo_sebook),&#10;                    contentDescription = &quot;SEBOOK Logo&quot;,&#10;                    modifier = Modifier&#10;                        .width(100.dp)&#10;                        .height(35.dp),&#10;                    contentScale = ContentScale.Fit&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(18.dp))&#10;&#10;            // Judul Halaman&#10;            Text(&#10;                text = &quot;Ruangan di Sakato&quot;,&#10;                fontSize = 20.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                fontFamily = FontFamily(Font(R.font.poppins_bold)),&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;&#10;            // Daftar Ruangan&#10;            Column(&#10;                verticalArrangement = Arrangement.spacedBy(12.dp)&#10;            ) {&#10;                RoomCard(&#10;                    roomName = &quot;Ruang Ampliteather&quot;,&#10;                    onClick = { navController.navigate(&quot;detail_ruangan/ampliteather&quot;) },&#10;                    imageResourceId = R.drawable.amplifier_1&#10;                )&#10;                RoomCard(&#10;                    roomName = &quot;Ruang Tengah&quot;,&#10;                    onClick = { navController.navigate(&quot;detail_ruangan/tengah&quot;) },&#10;                    imageResourceId = R.drawable.tengah_2&#10;                )&#10;                RoomCard(&#10;                    roomName = &quot;Ruang Outdor&quot;,&#10;                    onClick = { navController.navigate(&quot;detail_ruangan/outdor&quot;) },&#10;                    imageResourceId = R.drawable.belakang_1&#10;                )&#10;            }&#10;&#10;            // Tombol Panduan di pojok kanan&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.End&#10;            ) {&#10;                CustomButton(&#10;                    text = &quot;Panduan&quot;,&#10;                    onClick = { navController.navigate(&quot;panduan&quot;) }&#10;                )&#10;            }&#10;        }&#10;&#10;        // Gambar gelombang hijau di bawah (overlay)&#10;        Image(&#10;            painter = painterResource(id = R.drawable.rectangle_4),&#10;            contentDescription = &quot;Gelombang Hijau&quot;,&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .offset(y = 40.dp)&#10;                .align(Alignment.BottomCenter),&#10;            contentScale = ContentScale.FillWidth&#10;        )&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun PreviewRuanganDiSakato() {&#10;    RuanganDiSakato(innerPadding = PaddingValues(0.dp), navController = rememberNavController())&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/sebook/ui/theme/screens/riwayat/review.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/sebook/ui/theme/screens/riwayat/review.kt" />
              <option name="originalContent" value="package com.example.sebook.ui.theme.screens.riwayat&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.text.BasicTextField&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.navigation.NavController&#10;import androidx.navigation.compose.rememberNavController&#10;import com.example.sebook.R&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import com.example.sebook.ui.theme.components.CustomButton&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ReviewScreen(navController: NavController, onSubmit: () -&gt; Unit = {}) {&#10;    var rating by remember { mutableStateOf(0) }&#10;    var reviewText by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            CenterAlignedTopAppBar(&#10;                title = {&#10;                    Text(&#10;                        text = &quot;Review&quot;,&#10;                        fontSize = 18.sp,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                },&#10;                navigationIcon = {&#10;                    IconButton(onClick = { navController.popBackStack() }) {&#10;                        Icon(&#10;                            imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                            contentDescription = &quot;Back&quot;&#10;                        )&#10;                    }&#10;                },&#10;                colors = TopAppBarDefaults.centerAlignedTopAppBarColors(&#10;                    containerColor = Color.White&#10;                ),&#10;                windowInsets = WindowInsets(top = 24.dp)&#10;            )&#10;        },&#10;        content = { paddingValues -&gt;&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .background(Color.White)&#10;                    .padding(paddingValues)&#10;                    .padding(horizontal = 16.dp)&#10;            ) {&#10;                // Question Title&#10;                Text(&#10;                    text = &quot;Bagaimana Pengalamannya?&quot;,&#10;                    fontSize = 18.sp,&#10;                    fontWeight = FontWeight.Medium,&#10;                    modifier = Modifier.padding(vertical = 8.dp)&#10;                )&#10;&#10;                // Rating&#10;                Text(&quot;Rating&quot;, fontSize = 14.sp, color = Color.Gray)&#10;&#10;                Row(&#10;                    modifier = Modifier.padding(vertical = 8.dp)&#10;                ) {&#10;                    for (i in 1..5) {&#10;                        IconButton(onClick = { rating = i }) {&#10;                            Icon(&#10;                                painter = painterResource(id = if (i &lt;= rating) R.drawable.ic_star_filled else R.drawable.ic_star_empty),&#10;                                contentDescription = &quot;Star $i&quot;,&#10;                                modifier = Modifier.size(32.dp),&#10;                                tint = if (i &lt;= rating) Color(0xFFF96300) else Color(0xFFF96300)&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                // Review Text Area&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                OutlinedTextField(&#10;                    value = reviewText,&#10;                    onValueChange = { reviewText = it },&#10;                    label = { Text(&quot;Tulis Ulasan Anda&quot;) },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(150.dp),&#10;                    maxLines = 5,&#10;                    shape = RoundedCornerShape(8.dp),&#10;                    colors = OutlinedTextFieldDefaults.colors(&#10;                        focusedContainerColor = Color(0xFFF5F5F5),&#10;                        unfocusedContainerColor = Color(0xFFF5F5F5),&#10;                        disabledContainerColor = Color(0xFFF5F5F5),&#10;                        focusedBorderColor = Color.LightGray,&#10;                        unfocusedBorderColor = Color(0xFFDBE5DB),&#10;                    )&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;&#10;                // Tombol Ajukan&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.End&#10;                ) {&#10;                    CustomButton(&#10;                        text = &quot;Submit&quot;,&#10;                        onClick = onSubmit&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    )&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun ReviewScreenPreview() {&#10;    ReviewScreen(navController = rememberNavController())&#10;}" />
              <option name="updatedContent" value="package com.example.sebook.ui.theme.screens.riwayat&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.text.BasicTextField&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.navigation.NavController&#10;import androidx.navigation.compose.rememberNavController&#10;import com.example.sebook.R&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import com.example.sebook.ui.theme.components.CustomButton&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ReviewScreen(navController: NavController, onSubmit: () -&gt; Unit = {}) {&#10;    var rating by remember { mutableStateOf(0) }&#10;    var reviewText by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            CenterAlignedTopAppBar(&#10;                title = {&#10;                    Text(&#10;                        text = &quot;Review&quot;,&#10;                        fontSize = 18.sp,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                },&#10;                navigationIcon = {&#10;                    IconButton(onClick = { navController.popBackStack() }) {&#10;                        Icon(&#10;                            imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                            contentDescription = &quot;Back&quot;&#10;                        )&#10;                    }&#10;                },&#10;                colors = TopAppBarDefaults.centerAlignedTopAppBarColors(&#10;                    containerColor = Color.White&#10;                ),&#10;                windowInsets = WindowInsets(top = 24.dp)&#10;            )&#10;        },&#10;        content = { paddingValues -&gt;&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .background(Color.White)&#10;                    .padding(paddingValues)&#10;                    .padding(horizontal = 16.dp)&#10;            ) {&#10;                // Question Title&#10;                Text(&#10;                    text = &quot;Bagaimana Pengalamannya?&quot;,&#10;                    fontSize = 18.sp,&#10;                    fontWeight = FontWeight.Medium,&#10;                    modifier = Modifier.padding(vertical = 8.dp)&#10;                )&#10;&#10;                // Rating&#10;                Text(&quot;Rating&quot;, fontSize = 14.sp, color = Color.Gray)&#10;&#10;                Row(&#10;                    modifier = Modifier.padding(vertical = 8.dp)&#10;                ) {&#10;                    for (i in 1..5) {&#10;                        IconButton(onClick = { rating = i }) {&#10;                            Icon(&#10;                                painter = painterResource(id = if (i &lt;= rating) R.drawable.ic_star_filled else R.drawable.ic_star_empty),&#10;                                contentDescription = &quot;Star $i&quot;,&#10;                                modifier = Modifier.size(32.dp),&#10;                                tint = if (i &lt;= rating) Color(0xFFF96300) else Color(0xFFF96300)&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                // Review Text Area&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                OutlinedTextField(&#10;                    value = reviewText,&#10;                    onValueChange = { reviewText = it },&#10;                    label = { Text(&quot;Tulis Ulasan Anda&quot;) },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(150.dp),&#10;                    maxLines = 5,&#10;                    shape = RoundedCornerShape(8.dp),&#10;                    colors = OutlinedTextFieldDefaults.colors(&#10;                        focusedContainerColor = Color(0xFFF5F5F5),&#10;                        unfocusedContainerColor = Color(0xFFF5F5F5),&#10;                        disabledContainerColor = Color(0xFFF5F5F5),&#10;                        focusedBorderColor = Color.LightGray,&#10;                        unfocusedBorderColor = Color(0xFFDBE5DB),&#10;                    )&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;&#10;                // Tombol Ajukan&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.End&#10;                ) {&#10;                    CustomButton(&#10;                        text = &quot;Submit&quot;,&#10;                        onClick = onSubmit&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    )&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun ReviewScreenPreview() {&#10;    ReviewScreen(navController = rememberNavController())&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/sebook/ui/theme/screens/riwayat/riwayat_pengajuan.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/sebook/ui/theme/screens/riwayat/riwayat_pengajuan.kt" />
              <option name="originalContent" value="package com.example.sebook.ui.theme.screens.riwayat&#10;&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import androidx.navigation.compose.rememberNavController&#10;import com.example.sebook.R&#10;&#10;&#10;@Composable&#10;fun RiwayatPengajuan(navController: NavController) {&#10;    val scrollState = rememberScrollState()&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(horizontal = 16.dp)&#10;            .padding(top = 48.dp)&#10;            .verticalScroll(scrollState)&#10;    ) {&#10;        // Judul Halaman&#10;        Text(&#10;            text = &quot;Riwayat Pengajuan&quot;,&#10;            fontSize = 24.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;&#10;        // Daftar Pengajuan&#10;        Column(modifier = Modifier.fillMaxSize()) {&#10;            PengajuanCard(&#10;                roomName = &quot;Ruang Tengah&quot;,&#10;                date = &quot;Senin, 4 Oktober 2025&quot;,&#10;                time = &quot;13.00 - 16.00&quot;,&#10;                status = &quot;Di setujui&quot;,&#10;                imageResourceId = R.drawable.tengah_2,&#10;                onEditClick = { /* Aksi edit */ },&#10;                onDeleteClick = { /* Aksi hapus */ },&#10;                onReviewClick = { navController.navigate(&quot;review&quot;) }&#10;            )&#10;            PengajuanCard(&#10;                roomName = &quot;Ruang Tengah&quot;,&#10;                date = &quot;Senin, 4 Oktober 2025&quot;,&#10;                time = &quot;13.00 - 16.00&quot;,&#10;                status = &quot;Di Tolak&quot;,&#10;                imageResourceId = R.drawable.tengah_2,&#10;                onEditClick = { /* Aksi edit */ },&#10;                onDeleteClick = { /* Aksi hapus */ },&#10;                onReviewClick = { navController.navigate(&quot;review&quot;) }&#10;            )&#10;            // Tambahkan lebih banyak card sesuai dengan data pengajuan&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun PengajuanCard(&#10;    roomName: String,&#10;    date: String,&#10;    time: String,&#10;    status: String,&#10;    imageResourceId: Int,&#10;    onEditClick: () -&gt; Unit,&#10;    onDeleteClick: () -&gt; Unit,&#10;    onReviewClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 8.dp),&#10;        shape = RoundedCornerShape(12.dp),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        colors = CardDefaults.cardColors(containerColor = Color.White)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(12.dp),&#10;            verticalAlignment = Alignment.Top&#10;        ) {&#10;            // Gambar ruangan&#10;            Image(&#10;                painter = painterResource(id = imageResourceId),&#10;                contentDescription = &quot;Room Image&quot;,&#10;                modifier = Modifier&#10;                    .size(90.dp)&#10;                    .clip(RoundedCornerShape(8.dp)),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;&#10;            // Info pengajuan dan tombol&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                // Baris pertama: Nama ruangan + Status badge&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.Top&#10;                ) {&#10;                    // Nama ruangan&#10;                    Text(&#10;                        text = roomName,&#10;                        fontSize = 16.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = Color.Black,&#10;                        modifier = Modifier.weight(1f)&#10;                    )&#10;&#10;                    // Status badge&#10;                    Surface(&#10;                        shape = RoundedCornerShape(12.dp),&#10;                        color = if (status == &quot;Di setujui&quot;) Color(0xFF4CAF50) else Color(0xFFFF5252)&#10;                    ) {&#10;                        Text(&#10;                            text = status,&#10;                            fontSize = 11.sp,&#10;                            fontWeight = FontWeight.SemiBold,&#10;                            color = Color.White,&#10;                            modifier = Modifier.padding(horizontal = 12.dp, vertical = 4.dp)&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(6.dp))&#10;&#10;                // Tanggal&#10;                Text(&#10;                    text = date,&#10;                    fontSize = 13.sp,&#10;                    color = Color.Gray&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(2.dp))&#10;&#10;                // Waktu&#10;                Text(&#10;                    text = time,&#10;                    fontSize = 13.sp,&#10;                    color = Color.Gray&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(10.dp))&#10;&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.End,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    FilledIconButton(&#10;                        onClick = onEditClick,&#10;                        modifier = Modifier.size(36.dp),&#10;                        shape = RoundedCornerShape(8.dp),&#10;                        colors = IconButtonDefaults.filledIconButtonColors(&#10;                            containerColor = Color(0xFFFF8C00),&#10;                            contentColor = Color.White&#10;                        )&#10;                    ) {&#10;                        Icon(&#10;                            painter = painterResource(R.drawable.ic_edit),&#10;                            contentDescription = &quot;Edit&quot;,&#10;                            modifier = Modifier.size(18.dp)&#10;                        )&#10;                    }&#10;&#10;                    Spacer(Modifier.width(6.dp))&#10;&#10;                    FilledIconButton(&#10;                        onClick = onDeleteClick,&#10;                        modifier = Modifier.size(36.dp),&#10;                        shape = RoundedCornerShape(8.dp),&#10;                        colors = IconButtonDefaults.filledIconButtonColors(&#10;                            containerColor = Color(0xFFFF8C00),&#10;                            contentColor = Color.White&#10;                        )&#10;                    ) {&#10;                        Icon(&#10;                            painter = painterResource(R.drawable.ic_delete),&#10;                            contentDescription = &quot;Delete&quot;,&#10;                            modifier = Modifier.size(18.dp)&#10;                        )&#10;                    }&#10;&#10;                    Spacer(Modifier.width(6.dp))&#10;&#10;                    FilledIconButton(&#10;                        onClick = onReviewClick,&#10;                        modifier = Modifier.size(36.dp),&#10;                        shape = RoundedCornerShape(8.dp),&#10;                        colors = IconButtonDefaults.filledIconButtonColors(&#10;                            containerColor = Color(0xFFFF8C00),&#10;                            contentColor = Color.White&#10;                        )&#10;                    ) {&#10;                        Icon(&#10;                            painter = painterResource(R.drawable.ic_review),&#10;                            contentDescription = &quot;Review&quot;,&#10;                            modifier = Modifier.size(18.dp)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun PreviewRiwayatPengajuan() {&#10;    RiwayatPengajuan(navController = rememberNavController())&#10;}" />
              <option name="updatedContent" value="package com.example.sebook.ui.theme.screens.riwayat&#10;&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import androidx.navigation.compose.rememberNavController&#10;import com.example.sebook.R&#10;&#10;&#10;@Composable&#10;fun RiwayatPengajuan(navController: NavController) {&#10;    val scrollState = rememberScrollState()&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(horizontal = 16.dp)&#10;            .padding(top = 48.dp)&#10;            .verticalScroll(scrollState)&#10;    ) {&#10;        // Judul Halaman&#10;        Text(&#10;            text = &quot;Riwayat Pengajuan&quot;,&#10;            fontSize = 24.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;&#10;        // Daftar Pengajuan&#10;        Column(modifier = Modifier.fillMaxSize()) {&#10;            PengajuanCard(&#10;                roomName = &quot;Ruang Tengah&quot;,&#10;                date = &quot;Senin, 4 Oktober 2025&quot;,&#10;                time = &quot;13.00 - 16.00&quot;,&#10;                status = &quot;Di setujui&quot;,&#10;                imageResourceId = R.drawable.tengah_2,&#10;                onEditClick = { /* Aksi edit */ },&#10;                onDeleteClick = { /* Aksi hapus */ },&#10;                onReviewClick = { navController.navigate(&quot;review&quot;) }&#10;            )&#10;            PengajuanCard(&#10;                roomName = &quot;Ruang Tengah&quot;,&#10;                date = &quot;Senin, 4 Oktober 2025&quot;,&#10;                time = &quot;13.00 - 16.00&quot;,&#10;                status = &quot;Di Tolak&quot;,&#10;                imageResourceId = R.drawable.tengah_2,&#10;                onEditClick = { /* Aksi edit */ },&#10;                onDeleteClick = { /* Aksi hapus */ },&#10;                onReviewClick = { navController.navigate(&quot;review&quot;) }&#10;            )&#10;            // Tambahkan lebih banyak card sesuai dengan data pengajuan&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun PengajuanCard(&#10;    roomName: String,&#10;    date: String,&#10;    time: String,&#10;    status: String,&#10;    imageResourceId: Int,&#10;    onEditClick: () -&gt; Unit,&#10;    onDeleteClick: () -&gt; Unit,&#10;    onReviewClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 8.dp),&#10;        shape = RoundedCornerShape(12.dp),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        colors = CardDefaults.cardColors(containerColor = Color.White)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(12.dp),&#10;            verticalAlignment = Alignment.Top&#10;        ) {&#10;            // Gambar ruangan&#10;            Image(&#10;                painter = painterResource(id = imageResourceId),&#10;                contentDescription = &quot;Room Image&quot;,&#10;                modifier = Modifier&#10;                    .size(90.dp)&#10;                    .clip(RoundedCornerShape(8.dp)),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;&#10;            // Info pengajuan dan tombol&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                // Baris pertama: Nama ruangan + Status badge&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.Top&#10;                ) {&#10;                    // Nama ruangan&#10;                    Text(&#10;                        text = roomName,&#10;                        fontSize = 16.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = Color.Black,&#10;                        modifier = Modifier.weight(1f)&#10;                    )&#10;&#10;                    // Status badge&#10;                    Surface(&#10;                        shape = RoundedCornerShape(12.dp),&#10;                        color = if (status == &quot;Di setujui&quot;) Color(0xFF4CAF50) else Color(0xFFFF5252)&#10;                    ) {&#10;                        Text(&#10;                            text = status,&#10;                            fontSize = 11.sp,&#10;                            fontWeight = FontWeight.SemiBold,&#10;                            color = Color.White,&#10;                            modifier = Modifier.padding(horizontal = 12.dp, vertical = 4.dp)&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(6.dp))&#10;&#10;                // Tanggal&#10;                Text(&#10;                    text = date,&#10;                    fontSize = 13.sp,&#10;                    color = Color.Gray&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(2.dp))&#10;&#10;                // Waktu&#10;                Text(&#10;                    text = time,&#10;                    fontSize = 13.sp,&#10;                    color = Color.Gray&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(10.dp))&#10;&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.End,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    FilledIconButton(&#10;                        onClick = onEditClick,&#10;                        modifier = Modifier.size(36.dp),&#10;                        shape = RoundedCornerShape(8.dp),&#10;                        colors = IconButtonDefaults.filledIconButtonColors(&#10;                            containerColor = Color(0xFFFF8C00),&#10;                            contentColor = Color.White&#10;                        )&#10;                    ) {&#10;                        Icon(&#10;                            painter = painterResource(R.drawable.ic_edit),&#10;                            contentDescription = &quot;Edit&quot;,&#10;                            modifier = Modifier.size(18.dp)&#10;                        )&#10;                    }&#10;&#10;                    Spacer(Modifier.width(6.dp))&#10;&#10;                    FilledIconButton(&#10;                        onClick = onDeleteClick,&#10;                        modifier = Modifier.size(36.dp),&#10;                        shape = RoundedCornerShape(8.dp),&#10;                        colors = IconButtonDefaults.filledIconButtonColors(&#10;                            containerColor = Color(0xFFFF8C00),&#10;                            contentColor = Color.White&#10;                        )&#10;                    ) {&#10;                        Icon(&#10;                            painter = painterResource(R.drawable.ic_delete),&#10;                            contentDescription = &quot;Delete&quot;,&#10;                            modifier = Modifier.size(18.dp)&#10;                        )&#10;                    }&#10;&#10;                    Spacer(Modifier.width(6.dp))&#10;&#10;                    FilledIconButton(&#10;                        onClick = onReviewClick,&#10;                        modifier = Modifier.size(36.dp),&#10;                        shape = RoundedCornerShape(8.dp),&#10;                        colors = IconButtonDefaults.filledIconButtonColors(&#10;                            containerColor = Color(0xFFFF8C00),&#10;                            contentColor = Color.White&#10;                        )&#10;                    ) {&#10;                        Icon(&#10;                            painter = painterResource(R.drawable.ic_review),&#10;                            contentDescription = &quot;Review&quot;,&#10;                            modifier = Modifier.size(18.dp)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun PreviewRiwayatPengajuan() {&#10;    RiwayatPengajuan(navController = rememberNavController())&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;adaptive-icon xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;background android:drawable=&quot;@drawable/ic_launcher_background&quot; /&gt;&#10;    &lt;foreground android:drawable=&quot;@drawable/ic_launcher_foreground&quot; /&gt;&#10;    &lt;monochrome android:drawable=&quot;@drawable/ic_launcher_foreground&quot; /&gt;&#10;&lt;/adaptive-icon&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;adaptive-icon xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;background android:drawable=&quot;@drawable/ic_sabook_background&quot; /&gt;&#10;    &lt;foreground android:drawable=&quot;@drawable/ic_sabook_foreground&quot; /&gt;&#10;    &lt;monochrome android:drawable=&quot;@drawable/ic_sabook_foreground&quot; /&gt;&#10;&lt;/adaptive-icon&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gradle/libs.versions.toml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gradle/libs.versions.toml" />
              <option name="originalContent" value="[versions]&#10;agp = &quot;8.12.3&quot;&#10;kotlin = &quot;2.0.21&quot;&#10;coreKtx = &quot;1.17.0&quot;&#10;junit = &quot;4.13.2&quot;&#10;junitVersion = &quot;1.3.0&quot;&#10;espressoCore = &quot;3.7.0&quot;&#10;lifecycleRuntimeKtx = &quot;2.9.4&quot;&#10;activityCompose = &quot;1.11.0&quot;&#10;composeBom = &quot;2024.09.00&quot;&#10;datastore = &quot;1.1.1&quot;&#10;viewmodelCompose = &quot;2.8.6&quot;&#10;coil = &quot;2.7.0&quot;&#10;&#10;[libraries]&#10;androidx-core-ktx = { group = &quot;androidx.core&quot;, name = &quot;core-ktx&quot;, version.ref = &quot;coreKtx&quot; }&#10;junit = { group = &quot;junit&quot;, name = &quot;junit&quot;, version.ref = &quot;junit&quot; }&#10;androidx-junit = { group = &quot;androidx.test.ext&quot;, name = &quot;junit&quot;, version.ref = &quot;junitVersion&quot; }&#10;androidx-espresso-core = { group = &quot;androidx.test.espresso&quot;, name = &quot;espresso-core&quot;, version.ref = &quot;espressoCore&quot; }&#10;androidx-lifecycle-runtime-ktx = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-runtime-ktx&quot;, version.ref = &quot;lifecycleRuntimeKtx&quot; }&#10;androidx-activity-compose = { group = &quot;androidx.activity&quot;, name = &quot;activity-compose&quot;, version.ref = &quot;activityCompose&quot; }&#10;androidx-compose-bom = { group = &quot;androidx.compose&quot;, name = &quot;compose-bom&quot;, version.ref = &quot;composeBom&quot; }&#10;androidx-ui = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui&quot; }&#10;androidx-ui-graphics = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-graphics&quot; }&#10;androidx-ui-tooling = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling&quot; }&#10;androidx-ui-tooling-preview = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling-preview&quot; }&#10;androidx-ui-test-manifest = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-manifest&quot; }&#10;androidx-ui-test-junit4 = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-junit4&quot; }&#10;androidx-material3 = { group = &quot;androidx.compose.material3&quot;, name = &quot;material3&quot; }&#10;androidx-datastore-preferences = { group = &quot;androidx.datastore&quot;, name = &quot;datastore-preferences&quot;, version.ref = &quot;datastore&quot; }&#10;androidx-lifecycle-viewmodel-compose = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-viewmodel-compose&quot;, version.ref = &quot;viewmodelCompose&quot; }&#10;coil-compose = { group = &quot;io.coil-kt&quot;, name = &quot;coil-compose&quot;, version.ref = &quot;coil&quot; }&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }&#10;kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }&#10;kotlin-compose = { id = &quot;org.jetbrains.kotlin.plugin.compose&quot;, version.ref = &quot;kotlin&quot; }&#10;" />
              <option name="updatedContent" value="[versions]&#10;agp = &quot;8.12.3&quot;&#10;kotlin = &quot;2.0.21&quot;&#10;coreKtx = &quot;1.17.0&quot;&#10;junit = &quot;4.13.2&quot;&#10;junitVersion = &quot;1.3.0&quot;&#10;espressoCore = &quot;3.7.0&quot;&#10;lifecycleRuntimeKtx = &quot;2.9.4&quot;&#10;activityCompose = &quot;1.11.0&quot;&#10;composeBom = &quot;2024.09.00&quot;&#10;datastore = &quot;1.1.1&quot;&#10;viewmodelCompose = &quot;2.8.6&quot;&#10;coil = &quot;2.7.0&quot;&#10;&#10;[libraries]&#10;androidx-core-ktx = { group = &quot;androidx.core&quot;, name = &quot;core-ktx&quot;, version.ref = &quot;coreKtx&quot; }&#10;junit = { group = &quot;junit&quot;, name = &quot;junit&quot;, version.ref = &quot;junit&quot; }&#10;androidx-junit = { group = &quot;androidx.test.ext&quot;, name = &quot;junit&quot;, version.ref = &quot;junitVersion&quot; }&#10;androidx-espresso-core = { group = &quot;androidx.test.espresso&quot;, name = &quot;espresso-core&quot;, version.ref = &quot;espressoCore&quot; }&#10;androidx-lifecycle-runtime-ktx = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-runtime-ktx&quot;, version.ref = &quot;lifecycleRuntimeKtx&quot; }&#10;androidx-activity-compose = { group = &quot;androidx.activity&quot;, name = &quot;activity-compose&quot;, version.ref = &quot;activityCompose&quot; }&#10;androidx-compose-bom = { group = &quot;androidx.compose&quot;, name = &quot;compose-bom&quot;, version.ref = &quot;composeBom&quot; }&#10;androidx-ui = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui&quot; }&#10;androidx-ui-graphics = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-graphics&quot; }&#10;androidx-ui-tooling = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling&quot; }&#10;androidx-ui-tooling-preview = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling-preview&quot; }&#10;androidx-ui-test-manifest = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-manifest&quot; }&#10;androidx-ui-test-junit4 = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-junit4&quot; }&#10;androidx-material3 = { group = &quot;androidx.compose.material3&quot;, name = &quot;material3&quot; }&#10;androidx-datastore-preferences = { group = &quot;androidx.datastore&quot;, name = &quot;datastore-preferences&quot;, version.ref = &quot;datastore&quot; }&#10;androidx-lifecycle-viewmodel-compose = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-viewmodel-compose&quot;, version.ref = &quot;viewmodelCompose&quot; }&#10;coil-compose = { group = &quot;io.coil-kt&quot;, name = &quot;coil-compose&quot;, version.ref = &quot;coil&quot; }&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }&#10;kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }&#10;kotlin-compose = { id = &quot;org.jetbrains.kotlin.plugin.compose&quot;, version.ref = &quot;kotlin&quot; }" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>